#include <hxcpp.h>

#ifndef INCLUDED_com_season_basis_EventTypes
#include <com/season/basis/EventTypes.h>
#endif
namespace com{
namespace season{
namespace basis{

Void EventTypes_obj::__construct()
{
	return null();
}

EventTypes_obj::~EventTypes_obj() { }

Dynamic EventTypes_obj::__CreateEmpty() { return  new EventTypes_obj; }
hx::ObjectPtr< EventTypes_obj > EventTypes_obj::__new()
{  hx::ObjectPtr< EventTypes_obj > result = new EventTypes_obj();
	result->__construct();
	return result;}

Dynamic EventTypes_obj::__Create(hx::DynamicArray inArgs)
{  hx::ObjectPtr< EventTypes_obj > result = new EventTypes_obj();
	result->__construct();
	return result;}

::String EventTypes_obj::CONTROL_TOUCH_DOWN;

::String EventTypes_obj::CONTROL_TOUCH_DOWN_REPEAT;

::String EventTypes_obj::CONTROL_TOUCH_DRAG_INSIDE;

::String EventTypes_obj::CONTROL_TOUCH_DRAG_OUTSIDE;

::String EventTypes_obj::CONTROL_TOUCH_DRAG_ENTER;

::String EventTypes_obj::CONTROL_TOUCH_DRAG_EXIT;

::String EventTypes_obj::CONTROL_TOUCH_UP_INSIDE;

::String EventTypes_obj::CONTROL_TOUCH_UP_OUTSIDE;

::String EventTypes_obj::CONTROL_TOUCH_CANCEL;

::String EventTypes_obj::CONTROL_VALUE_CHANGED;

::String EventTypes_obj::CONTROL_EDITING_DID_BEGIN;

::String EventTypes_obj::CONTROL_EDITING_CHANGED;

::String EventTypes_obj::CONTROL_EDITING_DID_END;

::String EventTypes_obj::CONTROL_EDITING_DID_END_ON_EXIT;

::String EventTypes_obj::CONTROL_ALL_TOUCH_EVENTS;

::String EventTypes_obj::CONTROL_ALL_EDITING_EVENTS;

::String EventTypes_obj::CONTROL_APPLICATION_RESERVED;

::String EventTypes_obj::CONTROL_SYSTEMR_ESERVED;

::String EventTypes_obj::CONTROL_ALL_EVENTS;


EventTypes_obj::EventTypes_obj()
{
}

void EventTypes_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(EventTypes);
	HX_MARK_END_CLASS();
}

void EventTypes_obj::__Visit(HX_VISIT_PARAMS)
{
}

Dynamic EventTypes_obj::__Field(const ::String &inName,bool inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DOWN") ) { return CONTROL_TOUCH_DOWN; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_EVENTS") ) { return CONTROL_ALL_EVENTS; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_CANCEL") ) { return CONTROL_TOUCH_CANCEL; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"CONTROL_VALUE_CHANGED") ) { return CONTROL_VALUE_CHANGED; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_EXIT") ) { return CONTROL_TOUCH_DRAG_EXIT; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_UP_INSIDE") ) { return CONTROL_TOUCH_UP_INSIDE; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_CHANGED") ) { return CONTROL_EDITING_CHANGED; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_END") ) { return CONTROL_EDITING_DID_END; }
		if (HX_FIELD_EQ(inName,"CONTROL_SYSTEMR_ESERVED") ) { return CONTROL_SYSTEMR_ESERVED; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_ENTER") ) { return CONTROL_TOUCH_DRAG_ENTER; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_UP_OUTSIDE") ) { return CONTROL_TOUCH_UP_OUTSIDE; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_TOUCH_EVENTS") ) { return CONTROL_ALL_TOUCH_EVENTS; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DOWN_REPEAT") ) { return CONTROL_TOUCH_DOWN_REPEAT; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_INSIDE") ) { return CONTROL_TOUCH_DRAG_INSIDE; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_BEGIN") ) { return CONTROL_EDITING_DID_BEGIN; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_OUTSIDE") ) { return CONTROL_TOUCH_DRAG_OUTSIDE; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_EDITING_EVENTS") ) { return CONTROL_ALL_EDITING_EVENTS; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"CONTROL_APPLICATION_RESERVED") ) { return CONTROL_APPLICATION_RESERVED; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_END_ON_EXIT") ) { return CONTROL_EDITING_DID_END_ON_EXIT; }
	}
	return super::__Field(inName,inCallProp);
}

Dynamic EventTypes_obj::__SetField(const ::String &inName,const Dynamic &inValue,bool inCallProp)
{
	switch(inName.length) {
	case 18:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DOWN") ) { CONTROL_TOUCH_DOWN=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_EVENTS") ) { CONTROL_ALL_EVENTS=inValue.Cast< ::String >(); return inValue; }
		break;
	case 20:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_CANCEL") ) { CONTROL_TOUCH_CANCEL=inValue.Cast< ::String >(); return inValue; }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"CONTROL_VALUE_CHANGED") ) { CONTROL_VALUE_CHANGED=inValue.Cast< ::String >(); return inValue; }
		break;
	case 23:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_EXIT") ) { CONTROL_TOUCH_DRAG_EXIT=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_UP_INSIDE") ) { CONTROL_TOUCH_UP_INSIDE=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_CHANGED") ) { CONTROL_EDITING_CHANGED=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_END") ) { CONTROL_EDITING_DID_END=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_SYSTEMR_ESERVED") ) { CONTROL_SYSTEMR_ESERVED=inValue.Cast< ::String >(); return inValue; }
		break;
	case 24:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_ENTER") ) { CONTROL_TOUCH_DRAG_ENTER=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_UP_OUTSIDE") ) { CONTROL_TOUCH_UP_OUTSIDE=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_TOUCH_EVENTS") ) { CONTROL_ALL_TOUCH_EVENTS=inValue.Cast< ::String >(); return inValue; }
		break;
	case 25:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DOWN_REPEAT") ) { CONTROL_TOUCH_DOWN_REPEAT=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_INSIDE") ) { CONTROL_TOUCH_DRAG_INSIDE=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_BEGIN") ) { CONTROL_EDITING_DID_BEGIN=inValue.Cast< ::String >(); return inValue; }
		break;
	case 26:
		if (HX_FIELD_EQ(inName,"CONTROL_TOUCH_DRAG_OUTSIDE") ) { CONTROL_TOUCH_DRAG_OUTSIDE=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"CONTROL_ALL_EDITING_EVENTS") ) { CONTROL_ALL_EDITING_EVENTS=inValue.Cast< ::String >(); return inValue; }
		break;
	case 28:
		if (HX_FIELD_EQ(inName,"CONTROL_APPLICATION_RESERVED") ) { CONTROL_APPLICATION_RESERVED=inValue.Cast< ::String >(); return inValue; }
		break;
	case 31:
		if (HX_FIELD_EQ(inName,"CONTROL_EDITING_DID_END_ON_EXIT") ) { CONTROL_EDITING_DID_END_ON_EXIT=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void EventTypes_obj::__GetFields(Array< ::String> &outFields)
{
	super::__GetFields(outFields);
};

static ::String sStaticFields[] = {
	HX_CSTRING("CONTROL_TOUCH_DOWN"),
	HX_CSTRING("CONTROL_TOUCH_DOWN_REPEAT"),
	HX_CSTRING("CONTROL_TOUCH_DRAG_INSIDE"),
	HX_CSTRING("CONTROL_TOUCH_DRAG_OUTSIDE"),
	HX_CSTRING("CONTROL_TOUCH_DRAG_ENTER"),
	HX_CSTRING("CONTROL_TOUCH_DRAG_EXIT"),
	HX_CSTRING("CONTROL_TOUCH_UP_INSIDE"),
	HX_CSTRING("CONTROL_TOUCH_UP_OUTSIDE"),
	HX_CSTRING("CONTROL_TOUCH_CANCEL"),
	HX_CSTRING("CONTROL_VALUE_CHANGED"),
	HX_CSTRING("CONTROL_EDITING_DID_BEGIN"),
	HX_CSTRING("CONTROL_EDITING_CHANGED"),
	HX_CSTRING("CONTROL_EDITING_DID_END"),
	HX_CSTRING("CONTROL_EDITING_DID_END_ON_EXIT"),
	HX_CSTRING("CONTROL_ALL_TOUCH_EVENTS"),
	HX_CSTRING("CONTROL_ALL_EDITING_EVENTS"),
	HX_CSTRING("CONTROL_APPLICATION_RESERVED"),
	HX_CSTRING("CONTROL_SYSTEMR_ESERVED"),
	HX_CSTRING("CONTROL_ALL_EVENTS"),
	String(null()) };

static ::String sMemberFields[] = {
	String(null()) };

static void sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(EventTypes_obj::__mClass,"__mClass");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DOWN,"CONTROL_TOUCH_DOWN");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DOWN_REPEAT,"CONTROL_TOUCH_DOWN_REPEAT");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_INSIDE,"CONTROL_TOUCH_DRAG_INSIDE");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_OUTSIDE,"CONTROL_TOUCH_DRAG_OUTSIDE");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_ENTER,"CONTROL_TOUCH_DRAG_ENTER");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_EXIT,"CONTROL_TOUCH_DRAG_EXIT");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_UP_INSIDE,"CONTROL_TOUCH_UP_INSIDE");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_UP_OUTSIDE,"CONTROL_TOUCH_UP_OUTSIDE");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_CANCEL,"CONTROL_TOUCH_CANCEL");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_VALUE_CHANGED,"CONTROL_VALUE_CHANGED");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_BEGIN,"CONTROL_EDITING_DID_BEGIN");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_CHANGED,"CONTROL_EDITING_CHANGED");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_END,"CONTROL_EDITING_DID_END");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_END_ON_EXIT,"CONTROL_EDITING_DID_END_ON_EXIT");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_TOUCH_EVENTS,"CONTROL_ALL_TOUCH_EVENTS");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_EDITING_EVENTS,"CONTROL_ALL_EDITING_EVENTS");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_APPLICATION_RESERVED,"CONTROL_APPLICATION_RESERVED");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_SYSTEMR_ESERVED,"CONTROL_SYSTEMR_ESERVED");
	HX_MARK_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_EVENTS,"CONTROL_ALL_EVENTS");
};

static void sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(EventTypes_obj::__mClass,"__mClass");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DOWN,"CONTROL_TOUCH_DOWN");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DOWN_REPEAT,"CONTROL_TOUCH_DOWN_REPEAT");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_INSIDE,"CONTROL_TOUCH_DRAG_INSIDE");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_OUTSIDE,"CONTROL_TOUCH_DRAG_OUTSIDE");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_ENTER,"CONTROL_TOUCH_DRAG_ENTER");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_DRAG_EXIT,"CONTROL_TOUCH_DRAG_EXIT");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_UP_INSIDE,"CONTROL_TOUCH_UP_INSIDE");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_UP_OUTSIDE,"CONTROL_TOUCH_UP_OUTSIDE");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_TOUCH_CANCEL,"CONTROL_TOUCH_CANCEL");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_VALUE_CHANGED,"CONTROL_VALUE_CHANGED");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_BEGIN,"CONTROL_EDITING_DID_BEGIN");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_CHANGED,"CONTROL_EDITING_CHANGED");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_END,"CONTROL_EDITING_DID_END");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_EDITING_DID_END_ON_EXIT,"CONTROL_EDITING_DID_END_ON_EXIT");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_TOUCH_EVENTS,"CONTROL_ALL_TOUCH_EVENTS");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_EDITING_EVENTS,"CONTROL_ALL_EDITING_EVENTS");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_APPLICATION_RESERVED,"CONTROL_APPLICATION_RESERVED");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_SYSTEMR_ESERVED,"CONTROL_SYSTEMR_ESERVED");
	HX_VISIT_MEMBER_NAME(EventTypes_obj::CONTROL_ALL_EVENTS,"CONTROL_ALL_EVENTS");
};

Class EventTypes_obj::__mClass;

void EventTypes_obj::__register()
{
	Static(__mClass) = hx::RegisterClass(HX_CSTRING("com.season.basis.EventTypes"), hx::TCanCast< EventTypes_obj> ,sStaticFields,sMemberFields,
	&__CreateEmpty, &__Create,
	&super::__SGetClass(), 0, sMarkStatics, sVisitStatics);
}

void EventTypes_obj::__boot()
{
	CONTROL_TOUCH_DOWN= HX_CSTRING("CONTROL_TOUCH_DOWN");
	CONTROL_TOUCH_DOWN_REPEAT= HX_CSTRING("CONTROL_TOUCH_DOWN_REPEAT");
	CONTROL_TOUCH_DRAG_INSIDE= HX_CSTRING("CONTROL_TOUCH_DRAG_INSIDE");
	CONTROL_TOUCH_DRAG_OUTSIDE= HX_CSTRING("CONTROL_TOUCH_DRAG_OUTSIDE");
	CONTROL_TOUCH_DRAG_ENTER= HX_CSTRING("CONTROL_TOUCH_DRAG_ENTER");
	CONTROL_TOUCH_DRAG_EXIT= HX_CSTRING("CONTROL_TOUCH_DRAG_EXIT");
	CONTROL_TOUCH_UP_INSIDE= HX_CSTRING("CONTROL_TOUCH_UP_INSIDE");
	CONTROL_TOUCH_UP_OUTSIDE= HX_CSTRING("CONTROL_TOUCH_UP_OUTSIDE");
	CONTROL_TOUCH_CANCEL= HX_CSTRING("CONTROL_TOUCH_CANCEL");
	CONTROL_VALUE_CHANGED= HX_CSTRING("CONTROL_VALUE_CHANGED");
	CONTROL_EDITING_DID_BEGIN= HX_CSTRING("CONTROL_EDITING_DID_BEGIN");
	CONTROL_EDITING_CHANGED= HX_CSTRING("CONTROL_EDITING_CHANGED");
	CONTROL_EDITING_DID_END= HX_CSTRING("CONTROL_EDITING_DID_END");
	CONTROL_EDITING_DID_END_ON_EXIT= HX_CSTRING("CONTROL_EDITING_DID_END_ON_EXIT");
	CONTROL_ALL_TOUCH_EVENTS= HX_CSTRING("CONTROL_ALL_TOUCH_EVENTS");
	CONTROL_ALL_EDITING_EVENTS= HX_CSTRING("CONTROL_ALL_EDITING_EVENTS");
	CONTROL_APPLICATION_RESERVED= HX_CSTRING("CONTROL_APPLICATION_RESERVED");
	CONTROL_SYSTEMR_ESERVED= HX_CSTRING("CONTROL_SYSTEMR_ESERVED");
	CONTROL_ALL_EVENTS= HX_CSTRING("CONTROL_ALL_EVENTS");
}

} // end namespace com
} // end namespace season
} // end namespace basis
